{"mappings":"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","sources":["src/js/variables.js","src/js/functions.js","src/js/index.js"],"sourcesContent":["export const inputData = {\r\n\r\n  /* tipStateArray can take two values: \"0\" - button/input is disabled, \"1\" - button/input is enabled */\r\n  tipStateArray: [0, 0, 0, 0, 0, 0],\r\n\r\n  tipValue: 0,\r\n\r\n  /* inputValidityArray can take two values: \"0\" - input datum is invalid, \"1\" - input datum is valid,\r\n  elements successively refer to: [bill, tip, number of people] */\r\n  inputValidityArray: [0, 0, 0],\r\n\r\n\r\n  areAllValid(){\r\n\r\n    return ((this.inputValidityArray.every((el) => el == 1)) ? true : false)\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n/**** Class names ****/\r\nexport const inputWarningOutline = \"input--warning\";\r\nexport const buttonEnabled = \"button--enabled\";\r\n\r\n\r\n/**** DOM elements ****/\r\n/* tipDOMArray and inputData.tipStateArray have 6 elements, successively: buttons \"5%\", \"10%\", \"15%\", \"25%\", \"50%\" and input \"Custom\" */\r\nexport const tipDOMArray = document.querySelectorAll(\".button--tipButton\");\r\nexport const inputsDOMArray = [document.getElementById(\"input--bill\"), document.getElementById(\"input--tip\"), document.getElementById(\"input--people\")];\r\nexport const warningInfoDOMArray = [document.getElementById(\"warningInfo--bill\"), document.getElementById(\"warningInfo--tip\"), document.getElementById(\"warningInfo--people\")];\r\nexport const resetButton = document.getElementById(\"button--reset\");\r\nexport const resultTip = document.getElementById(\"results--tip\");\r\nexport const resultTotal = document.getElementById(\"results--total\");\r\n","import {inputData, inputWarningOutline, buttonEnabled, resetButton, resultTip, resultTotal, tipDOMArray, inputsDOMArray, warningInfoDOMArray} from \"./variables.js\";\r\n\r\n\r\nexport const tipButtonToggler = (button, i) => {\r\n\r\n\r\n  /* If the pressed button is already enabled  (except from \"Custom\" input) */\r\n  if (inputData.tipStateArray[i] == 1 && i != 5){\r\n\r\n    /* disable it */\r\n    button.classList.remove(buttonEnabled);\r\n    inputData.tipStateArray[i] = 0;\r\n    inputData.inputValidityArray[1] = 0;\r\n    inputData.tipValue = 0;\r\n\r\n  }\r\n\r\n  /* If any other button is enabled AND it isn't pressed custom input with already provided value */\r\n  else if (inputData.tipStateArray.some(value => value == 1) && !(inputData.tipStateArray[5] == 1 && i == 5)){\r\n\r\n    /* disable it */\r\n    tipDOMArray.forEach(button => button.classList.remove(buttonEnabled));\r\n    /* Clean custom input, but only when button is pressed */\r\n    if (i != 5){\r\n      inputsDOMArray[1].value = \"\";\r\n    }\r\n    inputData.tipValue = 0;\r\n    inputData.inputValidityArray[1] = 0;\r\n    inputData.tipStateArray.forEach((element, index, array) => array[index] = 0);\r\n\r\n\r\n    /* and enable pressed button */\r\n    if (i != 5){\r\n      button.classList.add(buttonEnabled);\r\n      inputData.tipStateArray[i] = 1;\r\n      inputData.inputValidityArray[1] = 1;\r\n      inputData.tipValue = tipDOMArray[i].value;\r\n    }\r\n\r\n\r\n  }\r\n\r\n  /* If all buttons are disabled*/\r\n  else if (inputData.tipStateArray.every(value => value == 0)) {\r\n\r\n    /* and enable pressed button */\r\n    if (i != 5){\r\n      button.classList.add(buttonEnabled);\r\n      inputData.tipStateArray[i] = 1;\r\n      inputData.inputValidityArray[1] = 1;\r\n      inputData.tipValue = tipDOMArray[i].value;\r\n    }\r\n\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\nexport const enableResetButton = () => {\r\n\r\n    resetButton.classList.add(buttonEnabled);\r\n\r\n}\r\n\r\n\r\nexport const determineCustomTipValue = () => {\r\n  inputData.tipValue = inputsDOMArray[1].value;\r\n}\r\n\r\n\r\nexport const resetAll = () => {\r\n\r\n\r\n  inputsDOMArray.forEach(el => el.value = \"\");\r\n  inputsDOMArray.forEach(el => el.classList.remove(inputWarningOutline));\r\n  tipDOMArray.forEach(el => el.classList.remove(buttonEnabled));\r\n\r\n\r\n  inputData.tipStateArray.forEach(el => el = 0);\r\n  inputData.inputValidityArray.forEach(el => el = 0);\r\n  inputData.tipValue = 0;\r\n\r\n\r\n  resultTip.innerHTML = \"€\" + 0;\r\n  resultTotal.innerHTML = \"€\" + 0;\r\n  warningInfoDOMArray.forEach(el => el.textContent = \"\");\r\n\r\n\r\n  resetButton.classList.remove(buttonEnabled);\r\n\r\n}\r\n\r\n\r\nexport const inputValidation = (input, i) => {\r\n\r\n\r\n  if (input.validity.valid){\r\n    warningInfoDOMArray[i].style.display = \"none\";\r\n    input.classList.remove(inputWarningOutline);\r\n    inputData.inputValidityArray[i] = 1;\r\n    if (i == 1){\r\n      inputData.tipStateArray[5] = 1;\r\n    }\r\n  } else {\r\n    showError(input, i);\r\n  }\r\n\r\n}\r\n\r\n\r\nconst showError = (input, i) => {\r\n\r\n  inputData.inputValidityArray[i] = 0;\r\n  warningInfoDOMArray[i].style.display = \"inline-block\";\r\n\r\n  if (input.validity.rangeOverflow){\r\n    warningInfoDOMArray[i].textContent = \"Too big numbo bro\";\r\n  } else if (input.validity.rangeUnderflow){\r\n    warningInfoDOMArray[i].style.display = \"inline-block\";\r\n    warningInfoDOMArray[i].textContent = \"No negative numbos bro\";\r\n  } else if (input.validity.badInput){\r\n    warningInfoDOMArray[i].textContent = \"Please only numbos bro\";\r\n  } else if (input.validity.stepMismatch){\r\n    warningInfoDOMArray[i].textContent = \"Please type a whole number\";\r\n  }\r\n\r\n}\r\n\r\n\r\nexport const updateResults = () => {\r\n\r\n  /* If all data are complete, calcualate results */\r\n  if (inputData.areAllValid()){\r\n\r\n    calculateResults();\r\n\r\n  /* If any data are incomplete, set results to €0 */\r\n  } else {\r\n\r\n    resetResults();\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\nexport const calculateResults = () => {\r\n\r\n  /** Calculate tip and total, with two decimal numbers **/\r\n  /* e.g. tipFactor = 1.25 means 25% tip */\r\n  const tipFactor = 1 + (inputData.tipValue) / 100;\r\n  const resultTipNotRounded = ((inputsDOMArray[0].value * tipFactor) - inputsDOMArray[0].value) / inputsDOMArray[2].value;\r\n\r\n  resultTip.innerHTML = Math.round(resultTipNotRounded * 100) / 100;\r\n  resultTotal.innerHTML = Math.round(inputsDOMArray[0].value * tipFactor / inputsDOMArray[2].value * 100) / 100;\r\n\r\n\r\n  /* When data are wrongly calculated /*/\r\n  if (resultTip.innerHTML == \"Infinity\" ||\r\n      resultTotal.innerHTML == \"Infinity\" ||\r\n      resultTip.innerHTML == \"NaN\" ||\r\n      resultTotal.innerHTML == \"NaN\"\r\n    ) {\r\n    resultTip.innerHTML = \"0\";\r\n    resultTotal.innerHTML = \"0\";\r\n   }\r\n\r\n\r\n\r\n  /* When tip result is too long - compress to thousands (k) millions (M) */\r\n  if (resultTip.innerHTML > 1000000){\r\n    resultTip.innerHTML = Math.round(resultTip.innerHTML / 1000000 * 100 ) / 100  + \"M\";\r\n  } else if (resultTip.innerHTML > 10000){\r\n    resultTip.innerHTML = Math.round(resultTip.innerHTML / 1000 * 100) / 100 + \"k\";\r\n  }\r\n\r\n\r\n  /* Add euro sign */\r\n  resultTip.innerHTML = \"€\" + resultTip.innerHTML;\r\n\r\n\r\n  /* When total result is too long - compress to thousands (k) millions (M) */\r\n  if (resultTotal.innerHTML > 1000000){\r\n    resultTotal.innerHTML = Math.round(resultTotal.innerHTML / 1000000 * 100) / 100 + \"M\";\r\n  } else if (resultTotal.innerHTML > 10000){\r\n    resultTotal.innerHTML = Math.round(resultTotal.innerHTML / 1000 * 100) / 100 + \"k\";\r\n  }\r\n\r\n\r\n  /* Add euro sign */\r\n  resultTotal.innerHTML = \"€\" + resultTotal.innerHTML;\r\n\r\n\r\n}\r\n\r\n\r\n\r\nconst resetResults = () => {\r\n\r\n  resultTip.innerHTML = \"€\" + \"0\";\r\n  resultTotal.innerHTML = \"€\" + \"0\";\r\n\r\n}\r\n","import {tipButtonToggler, enableResetButton, resetAll, updateResults, inputValidation, determineCustomTipValue} from \"./functions.js\";\r\nimport {inputData, resetButton, inputsDOMArray, tipDOMArray} from \"./variables.js\";\r\n\r\n\r\ntipDOMArray.forEach((button, i) => {\r\n\r\n  /***** Assign Event Listener *****/\r\n  button.addEventListener(\"click\", function() {\r\n\r\n    /* Enable or disable tip buttons */\r\n    tipButtonToggler(button, i);\r\n\r\n\r\n    /* Enable reset button */\r\n    if (inputData.tipStateArray.some(el => el == 1)){\r\n      enableResetButton();\r\n    }\r\n\r\n\r\n    /* Update results (calculate or reset) */\r\n    updateResults();\r\n\r\n\r\n\r\n  });\r\n\r\n})\r\n\r\n\r\n/*** Resetting ***/\r\nresetButton.addEventListener(\"click\", function() {\r\n\r\n  resetAll();\r\n\r\n})\r\n\r\n\r\ninputsDOMArray.forEach((input, i) => {\r\n\r\n  /***** Assign Event Listener *****/\r\n  input.addEventListener(\"input\", function() {\r\n\r\n    if (i == 1){\r\n      determineCustomTipValue();\r\n    }\r\n\r\n    /* Check if provided data are correct */\r\n    inputValidation(input, i);\r\n\r\n\r\n    /* Enable reset button */\r\n    enableResetButton();\r\n\r\n\r\n    /* Update results (calculate or reset) */\r\n    updateResults();\r\n\r\n    \r\n  })\r\n\r\n\r\n})\r\n"],"names":["$419b523b1d952cee$export$5a34bc5530b14195","tipStateArray","tipValue","inputValidityArray","this","every","el","$419b523b1d952cee$export$9a56c167eee942a2","document","querySelectorAll","$419b523b1d952cee$export$af585aee760d991a","getElementById","$419b523b1d952cee$export$c4e611cedceee5ed","$419b523b1d952cee$export$69181d24bfc61261","$419b523b1d952cee$export$211b9af31d0ce810","$8ffe94e0191fb87b$export$eb3e634c20f6d6ee","classList","add","$8ffe94e0191fb87b$var$showError","input","i","style","display","validity","rangeOverflow","textContent","rangeUnderflow","badInput","stepMismatch","$8ffe94e0191fb87b$export$2496d45061dc3e72","areAllValid","$8ffe94e0191fb87b$export$4c602fa3abeefeb4","$8ffe94e0191fb87b$var$resetResults","tipFactor","resultTipNotRounded","value","innerHTML","Math","round","$419b523b1d952cee$export$e811546714e8d108","forEach","button","addEventListener","button1","remove","some","element","index","array","$8ffe94e0191fb87b$export$8ccd9349d8c4c657","valid","$8ffe94e0191fb87b$export$d43684adb493e378"],"version":3,"file":"index.b335920d.js.map"}